shell.prefix("set -eo pipefail; echo BEGIN at $(date); ")
shell.suffix("; exitstat=$?; echo END at $(date); echo exit status was $exitstat; exit $exitstat")

configfile: "chipseq.yaml"

SAMPLES = config['SAMPLE']
CONTROLS = [sample for sample in SAMPLES if config['control'] in sample]
CASE = [sample for sample in SAMPLES if config['case'] in sample]

from itertools import product

rule all:
    input:
        expand("bam/{sample}.rmdup.bam", sample = SAMPLES),
        expand("bW/{sample}.bw", sample = SAMPLES),
        expand("Cpeaks/{case}_vs_{control}_PQ_peaks.narrowPeak", zip, case = CASE, control = CONTROLS)

rule fastp_trim:
    input:
        raw1 = "raw_seq/{sample}_1.fq.gz",
        raw2 = "raw_seq/{sample}_2.fq.gz"
    output:
        paired1 = "paired/{sample}_1.paired.fq.gz",
        paired2 = "paired/{sample}_2.paired.fq.gz"
    threads:
        config["fastp_trim"]["cpu"]
    log:
        "log/paired/{sample}.log"
    shell:
        "fastp -i {input.raw1} -o {output.paired1} -I {input.raw2} -O {output.paired2} -c -w {threads} > {log} 2>&1" 

rule bowtie2_map:
    input:
        paired1 = "paired/{sample}_1.paired.fq.gz",
        paired2 = "paired/{sample}_2.paired.fq.gz"
    output:
        sam = "bam/{sample}.sam"
    params:
        index = "ref/bowtie2/genome"
    threads:
        config["bowtie2_map"]["cpu"]
    log:
        "log/bowtie2/{sample}.log"
    shell:
        "bowtie2 -p {threads} -x {params.index} -1 {input.paired1} -2 {input.paired2} -S {output.sam} > {log} 2>&1"

rule sam2bam:
    input:
        sam = "bam/{sample}.sam"
    output:
        bam = "bam/{sample}.sort.bam"
    threads:
        config["sam2bam"]["cpu"]
    params:
        config["filterThreshold"]
    shell:
        "samtools view -@ {threads} -h -F 1804 -q {params} {input.sam}|samtools sort -@ {threads} -o {output.bam}"

rule MarkDup:
    input:
        "bam/{sample}.sort.bam"
    output:
        rmdup = "bam/{sample}.rmdup.bam",
        metrics = "bam/{sample}.metrics"
    threads:
        config["MarkDup"]["cpu"]
    log:
        "log/picard/{sample}.log"
    shell:
        "picard MarkDuplicates I={input} O={output.rmdup} M={output.metrics} REMOVE_DUPLICATES=true VALIDATION_STRINGENCY=LENIENT > {log} 2>&1"

rule bam_index:
    input:
        "bam/{sample}.rmdup.bam"
    output:
        "bam/{sample}.rmdup.bam.bai"
    threads:
        config["bam_index"]["cpu"]
    shell:
        "samtools index {input}"

rule bam2bw:
    input:
        bam = "bam/{sample}.rmdup.bam",
        bai = "bam/{sample}.rmdup.bam.bai"
    output:
        "bW/{sample}.bw"
    threads:
        config["bam2bw"]["cpu"]
    params:
        binsize = config["bam2bw"]["binsize"],
        normalizemethod = config["bam2bw"]["normalizemethod"]
    log:
        "log/bW/{sample}.log"
    shell:
        "bamCoverage -b {input.bam} --binSize {params.binsize} --normalizeUsing {params.normalizemethod} -o {output}"

rule callpeak:
    input:
        control = "bam/{control}.rmdup.bam",
        case = "bam/{case}.rmdup.bam"
    output:
        "Cpeaks/{case}_vs_{control}_PQ_peaks.narrowPeak"
    params:
        name = "{case}_vs_{control}_PQ",
        outdir = "Cpeaks/"
    threads:
        config["callpeak"]["cpu"]
    log:
        "log/macs2/{case}_vs_{control}.log"
    shell:
        "macs2 callpeak -t {input.case} -c {input.control} --outdir {params.outdir} -f BAMPE -g 374471240 -n {params.name} -p 0.01 > {log} 2>&1"